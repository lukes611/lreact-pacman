{"version":3,"sources":["l_react.ts","pacman/pt.ts","pacman/game.ts","pacman/render.ts","pacman/game_controls.ts","pacman/index.ts","index.ts"],"names":[],"mappings":"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","file":"game-land.dbd07a8d.js","sourceRoot":"..","sourcesContent":["type ComponentMakerKind =\n    | { kind: 'f', f: (p?: object) => _Element }\n    | { kind: 'c', c: new (p: object) => Component }\n    | { kind: 'html', type: string }\n    | { kind: 'string', value: string };\n\nexport class _Element {\n    _name?: string;\n    _parent?: _Element;\n    _elem?: HTMLElement | Text;\n    _velem?: _Element;\n    _dom?: HTMLElement;\n    _c?: Component<any, any>;\n    _useStateSysList?: UseStateSystem<any>[];\n\n    constructor(public maker: ComponentMakerKind, public props: Record<string, any>, public children: _Element[]) {\n        if (this.maker.kind === 'c') this._name = this.maker.c.constructor.name;\n    }\n\n    createElement() {\n        switch (this.maker.kind) {\n            case 'c': {\n                this._c = this._c ?? new this.maker.c(this.props);\n                this._c.paint = () => repaint2(this);\n                this._velem = this._c?.render();\n            }; break;\n            case 'f': {\n                useStateController.reset();\n                this._velem = this.maker.f(this.props);\n                this._useStateSysList = useStateController.maybeGetList(() => repaint2(this));\n                useStateController.reset();\n            }; break;\n            case 'html': {\n                this._elem = document.createElement(this.maker.type);\n            }; break;\n            case 'string': {\n                this._elem = document.createTextNode(this.maker.value);\n            }; break;\n        }\n    }\n\n    getMakerValue() {\n        switch (this.maker.kind) {\n            case 'c': return this.maker.c;\n            case 'f': return this.maker.f;\n            case 'html': return this.maker.type;\n            case 'string': return this.maker.value;\n        }\n    }\n\n    similar(e: _Element): boolean {\n        if (e.maker.kind !== this.maker.kind) return false;\n        if (e.maker.kind === 'string') return true;\n        if (this.getMakerValue() !== e.getMakerValue()) return false;\n        if (this.children.length !== e.children.length) return false;\n        return true;\n    }\n}\n\nexport { _Element as LReactElement };\n\ntype ComponentConstructor<P extends {} = {}, S extends {} = {}> = new(p: P) => Component<P, S>;\n\ntype MakerType<P extends object, S extends object> =\n    | string // eg. div, img, href\n    | ComponentConstructor<P, S>\n    | ((props: P | undefined) => _Element);\n\nexport function Element<P extends object, S extends object>(type: MakerType<P, S>, props: object = {}, children: (_Element | string | null)[] = []): _Element {\n    const properChildren = children.map(ch => {\n        if (typeof ch === 'string') return new _Element({ kind: 'string', value: ch }, {}, []);\n        return ch;\n    }).filter(x => x != null);\n    const fixedProps = {\n        ...props,\n        children: properChildren,\n    };\n    if (typeof type === 'function') {\n        if (isAComponentClass(type)) {\n            return new _Element({ kind: 'c', c: type as any }, fixedProps, properChildren);\n        }\n        return new _Element({ kind: 'f', f: type as any }, fixedProps, properChildren);\n    } else if (typeof type === 'string') {\n        return new _Element({ kind: 'html', type }, fixedProps, properChildren);\n    }\n}\n\nexport abstract class Component<Props extends {} = {}, State extends {} | void = void> {\n    props: Props;\n    state: State;\n\n    _vnode?: _Element;\n    paint?: (x: Component<Props, State>) => void;\n    componentDidMount() {}\n    componentDidUnmount() {}\n\n    constructor(props: Props) {\n        this.props = props;\n    }\n\n    public setState(s: Partial<State>) {\n        if (this.state) {\n            this.state = {\n                ...this.state,\n                ...s,\n            };\n            this.paint?.(this);\n        }\n    }\n\n    public abstract render(): _Element;\n}\n\nfunction isAComponentClass(x: any) {\n    if (typeof x !== 'function') return false;\n    return x.prototype && x.prototype.__isComponent;\n}\n\n(Component.prototype as unknown as any).__isComponent = true;\n\ntype UseStateConfig<T> = [\n    s: T,\n    set: (v: T) => void,\n];\n\nclass UseStateSystem<T> {\n    repaint?: () => void;\n    constructor(public v: T) {\n    }\n\n    set(v: T) {\n        this.v = v;\n        this.repaint?.();\n    }\n}\nclass UseStateController {\n    private mode: 'push' | 'pop' = 'push';\n    private list: UseStateSystem<any>[];\n    private index: number = 0;\n\n    reset() {\n        this.mode = 'push';\n        this.list = [];\n        this.index = 0;\n    }\n\n    getSys<T>(s: T): UseStateSystem<T> {\n        if (this.mode === 'push') {\n            const sys = new UseStateSystem(s);\n            this.list.push(sys);\n            return sys;\n        } else { // pop mode\n            return this.list[this.index++];\n        }\n    }\n\n    setupForConsumer(list: UseStateSystem<any>[]) {\n        this.list = list;\n        this.index = 0;\n        this.mode = 'pop';\n    }\n\n    maybeGetList(repaint: () => void): UseStateSystem<any>[] | undefined {\n        if (this.mode === 'push' && this.list.length) {\n            return [...this.list].map(sys => {\n                sys.repaint = repaint;\n                return sys;\n            });\n        }\n        return;\n    }\n} \n\nconst useStateController = new UseStateController();\n\nexport const useState = <T>(state: T): UseStateConfig<T> => {\n    const sys = useStateController.getSys(state);\n    \n    return [\n        sys.v,\n        (v: T) => sys.set(v),\n    ];\n};\n\n\ntype BothFn = (\n    child: _Element,\n    prevChild: _Element | undefined,\n    index: number,\n) => void;\n\ntype PrevFn = (\n    prevChild: _Element,\n    index: number,\n) => void;\n\nfunction loopThroughChildren(tree: _Element, prevTree: _Element | undefined, both: BothFn, prevOnly: PrevFn) {\n    const prevChildren = (prevTree ? prevTree.children : []) ?? [];\n    tree.children.forEach((c, i) => {\n        both(c, prevChildren[i], i);\n    });\n    if (!prevTree || tree.children.length > prevChildren.length) {\n        return;\n    }\n    for (let i = tree.children.length; i < prevChildren.length; i++) {\n        prevOnly(prevChildren[i], i);\n    }\n}\n\nfunction assignProps(element: HTMLElement, props: Record<string, any>) {\n    if (props.style) Object.assign(element.style, props.style);\n    if (props.onClick) element.onclick = (e) => props.onClick(e);\n    if (props.onMouseDown) element.onmousedown = (e) => props.onMouseDown(e);\n    if (props.onMouseUp) element.onmouseup = (e) => props.onMouseUp(e);\n    if (props.onTouchStart) element.ontouchstart = (e) => props.onTouchStart(e);\n    if (props.onTouchEnd) element.ontouchend = (e) => props.onTouchEnd(e);\n    if (props.onChange) element.oninput = (e) => props.onChange(e);\n\n    const rawAttributes = new Set(['width', 'height', 'href', 'id', 'value', 'type', 'checked']);\n    Object.keys(props).forEach(k => {\n        if (rawAttributes.has(k)) {\n            element[k] = props[k];\n        }\n    });\n}\n\nfunction objectsShallowEqual(obj1: Record<string, any>, obj2: Record<string, any>) {\n    const obj1Keys = Object.keys(obj1);\n    const obj2Keys = new Set(Object.keys(obj2));\n    if (obj1Keys.length !== obj2Keys.size) return false;\n    \n    for (const key of obj1Keys) {\n        if (!obj2Keys.has(key)) return false;\n        const v1 = obj1[key];\n        const v2 = obj2[key];\n        if (v1 !== v2) return false;\n    }\n    return true;\n}\n\nexport function RenderDom(e: _Element, domParent: HTMLElement) {\n    modifyTree(e, undefined, domParent, undefined);\n}\n\nfunction repaint2<P extends object, S extends object>(e: _Element) {\n    const oldTree = e._velem!;\n    let newTree: _Element;\n    if (e.maker.kind === 'c') {\n        newTree = e._c.render();\n    } else if (e.maker.kind === 'f') {\n        if (e._useStateSysList) {\n            useStateController.setupForConsumer(e._useStateSysList);\n        }\n        newTree = e.maker.f(e.props);\n        useStateController.reset();\n    }\n    \n    const parent = oldTree?._parent;\n    \n    modifyTree(newTree, parent, oldTree._dom, oldTree);\n    e._velem = newTree;\n}\n\nexport function modifyTree(tree: _Element, parent?: _Element, parentDOM?: HTMLElement, prevTree?: _Element) {\n    const { props, maker } = tree;\n    tree._dom = parentDOM;\n    \n    if (prevTree && prevTree.similar(tree)) {\n        if (tree.maker.kind === 'string' && prevTree.maker.kind == 'string') {\n            tree._elem = prevTree._elem;\n            const elem = tree._elem as Text;\n            elem.data = tree.maker.value;\n        } else if (prevTree._elem && tree.maker.kind === 'html') {\n            tree._elem = prevTree._elem;\n            if (!objectsShallowEqual(tree.props, prevTree.props)) {\n                assignProps(tree._elem as HTMLElement, props);\n            }\n            loopThroughChildren(tree, prevTree, (ch, pc, i) => {\n                modifyTree(ch, tree, tree._elem as HTMLElement, pc);\n            }, (pc, i) => {\n                if (prevTree._elem && pc._elem) {\n                    prevTree._elem.removeChild(pc._elem)\n                }\n                unmountAll(pc);\n            });\n            return;\n        } else if (prevTree._velem) {\n            tree._c = prevTree._c;\n            if (tree._c) {\n                tree._c.props = props;\n            }\n            tree._useStateSysList = prevTree._useStateSysList;\n            tree.createElement();\n            // removeElements(prevTree);\n            // unmountAll(prevTree._velem);\n            modifyTree(tree._velem, tree, parentDOM, prevTree._velem);\n            return;\n        } else return;\n    }\n\n    // new elements / overwrite prevTree\n    tree.createElement();\n    if (prevTree) {\n        unmountAll(prevTree);\n    }\n    if (parentDOM && tree._elem) {\n        if (prevTree && prevTree._elem) {\n            parentDOM.replaceChild(tree._elem, prevTree._elem);\n        } else {\n            parentDOM.appendChild(tree._elem);\n        }\n        if (tree.props.ref) {\n            tree.props.ref(tree._elem);\n        }\n        if (maker.kind === 'html') {\n            assignProps(tree._elem as HTMLElement, props);\n        }\n        loopThroughChildren(tree, prevTree, (ch, pch, i) => {\n            modifyTree(ch, tree, tree._elem as HTMLElement, undefined);\n        }, (pc, i) => {\n            removeElements(pc);\n        });\n    } else if (tree._velem) {\n        if (prevTree) {\n            removeElements(prevTree);\n        }\n        tree._c?.componentDidMount();\n        modifyTree(tree._velem, tree, parentDOM, undefined);\n    }\n}\n\nfunction unmountAll(t: _Element) {\n    t._c?.componentDidUnmount();\n    t.children.forEach(unmountAll);\n    if (t._velem) unmountAll(t._velem);\n}\n\nfunction removeElements(t: _Element) {\n    if (t._dom && t._elem) {\n        t._dom.removeChild(t._elem);\n        t._elem = undefined;\n    }\n    if (t._velem) {\n        removeElements(t._velem);\n    }\n}\n","export const Radians2Degrees = 180 / Math.PI;\n\nexport class Pt {\n    constructor(public x: number = 0, public y: number = 0) {\n    }\n\n    copy() {\n        return new Pt(this.x, this.y);\n    }\n\n    toString() {\n        return `<${this.x}, ${this.y}>`\n    }\n\n    floor() {\n        return new Pt(Math.floor(this.x), Math.floor(this.y));\n    }\n\n    ceil() {\n        return new Pt(Math.ceil(this.x), Math.ceil(this.y));\n    }\n\n    round() {\n        return new Pt(Math.round(this.x), Math.round(this.y));\n    }\n\n    scale(v: number): Pt {\n        return new Pt(this.x * v, this.y * v);\n    }\n\n    addY(yv: number): Pt {\n        return new Pt(this.x, this.y + yv);\n    }\n\n    add(x: number, y: number): Pt {\n        return new Pt(this.x + x, this.y + y);\n    }\n\n    addP({ x, y }: Pt): Pt {\n        return new Pt(this.x + x, this.y + y);\n    }\n\n    eq(p: Pt) {\n        return this.x === p.x && this.y === p.y;\n    }\n\n    dist(p: Pt) {\n        const diff = this.addP(p.scale(-1));\n        return diff.mag();\n    }\n    \n\n    static fromAngle(angle: number) {\n        const rv = new Pt(0, 0);\n        angle /= Radians2Degrees;\n        rv.x = Math.cos(angle);\n        rv.y = Math.sin(angle);\n        return rv;\n    }\n\n    getAngle() {\n        let angle: number = Radians2Degrees * Math.atan(this.y / this.x);\n        if (this.x < 0.0)\n            angle += 180.0;\n        else if (this.y < 0.0)\n            angle += 360.0;\n        return angle;\n    }\n\n    mag() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    unit() {\n        return this.scale(1 / this.mag());\n    }\n}\n","import { Pt } from './pt';\n\nconst halfLevel1 = `# level 1\n+-------+---------   \n|       |        |   \n|       |        |   \n|       |        |   \n|       |        |   \n+-----------+----+---\n|       |   |        \n|       |   |        \n|       |   |        \n|       |   +---+    \n|       |       |    \n|       |       |    \n|       |       |    \n+-------+   +---+---+\n        |   |       g\n        |   |       g\n        |   |       g\n        |   |       g\n        |   |       g\nt---p-------+   ggggg\n        |   |        \n        |   |        \n        |   |        \n        |   +--------\n        |   |        \n        |   |        \n+-----------+-------+\n|       |           |\n|       |           |\n|       |           |\n|       |           |\n+---+   +----+------+\n    |   |    |       \n    |   |    |       \n    |   |    |       \n+---+---+    +--+    \n|               |    \n|               |    \n|               |    \n+---------------+----\n`;\nexport const level1 = halfLevel1\n    .split('\\n')\n    .map(line => {\n        if (line.startsWith('#')) return line;\n        const secondHalf = line\n            .substring(0, line.length - 1)\n            .split('')\n            .reverse()\n            .map((v: string) => {\n                if (v === 'p' || v === 't') return '+';\n                return v;\n            })\n            .join('');\n        return line + secondHalf;\n    })\n    .join('\\n');\n\nexport type Dir = 'up' | 'down' | 'left' | 'right';\nexport const DIRECTIONS: readonly Dir[] = ['up', 'down', 'left', 'right'];\nfunction ptToDir(p: Pt): Dir {\n    if (p.x) {\n        if (p.x < 0) return 'left';\n        return 'right';\n    } else {\n        if (p.y < 0) return 'up';\n        return 'down';\n    }\n}\n\nfunction dirToPt(v: Dir): Pt {\n    switch (v) {\n        case 'up': return new Pt(0, -1);\n        case 'down': return new Pt(0, 1);\n        case 'left': return new Pt(-1, 0);\n        case 'right': return new Pt(1, 0);\n    }\n}\nexport class Level {\n    level: string[][];\n    w: number;\n    h: number;\n\n    constructor(levelString: string) {\n        this.level = levelString\n            .split('\\n')\n            .slice(1)\n            .map((s: string) => s.split(''));\n        this.w = this.level[0].length;\n        this.h = this.level.length;\n    }\n\n    static createLevel1() {\n        return new Level(level1);\n    }\n\n    isPath(x: number, y: number) {\n        const v = this.getV(x, y);\n        return v && v !== ' ';\n    }\n\n    isPathP(p: Pt) {\n        return this.isPath(p.x, p.y);\n    }\n\n    getV(x: number, y: number): string | undefined {\n        if (x < 0 || x >= this.w || y < 0 || y >= this.h) return undefined;\n        const v = this.level[y][x];\n        return v;\n    }\n\n    getLocationsOfChar(ch: string): Pt[] {\n        const out: Pt[] = [];\n        this.forEach((v: string | undefined, x: number, y: number) => {\n            if (v === ch) {\n                out.push(new Pt(x, y));\n            }\n        });\n        return out;\n    }\n\n    forEach(f: (v: string | undefined, x: number, y: number) => void) {\n        for (let y = 0; y < this.h; y++) {\n            for (let x = 0; x < this.w; x++) {\n                f(this.getV(x, y), x, y);\n            }\n        }\n    }\n\n    getClosestRailPoint(p: Pt) {\n        return p.round();\n    }\n\n    nearARailPoint(p: Pt, maxD: number = 0.08): boolean {\n        const xD = Math.abs(p.x - Math.round(p.x));\n        const yD = Math.abs(p.y - Math.round(p.y));\n        if (xD > maxD || yD > maxD) return false;\n        return true;\n    }\n\n    isRailPoint(p: Pt) {\n        return p.x % 1 === 0 && p.y % 1 === 0;\n    }\n\n    isSafePosition(p: Pt) {\n        return this.onRail(p);\n    }\n\n    onRail(p: Pt) {\n        if (this.isRailPoint(p) && this.isPathP(p)) return true; \n        if (p.y % 1 === 0) { // left/right\n            const fx = Math.floor(p.x);\n            const cx = Math.ceil(p.x);\n            if (this.isPath(fx, p.y) && this.isPath(cx, p.y)) return true;\n            return false;\n        }\n        const fy = Math.floor(p.y);\n        const cy = Math.ceil(p.y);\n        if (this.isPath(p.x, fy) && this.isPath(p.x, cy)) return true;\n        return false;\n    }\n\n    onALinearPath(pIn: Pt) {\n        const p = this.getClosestRailPoint(pIn);\n        const st = new Map<Dir, boolean>();\n        this.forSurroundingPoints(p, (d, x, v) => {\n            if (v && v !== ' ') st.set(d, true);\n        });\n        return (st.get('up') && st.get('down') && !st.get('left') && !st.get('right'))\n            || (!st.get('up') && !st.get('down') && st.get('left') && st.get('right'));\n    }\n\n    \n    forSurroundingPoints(p: Pt, f: (dir: Dir, p: Pt, v: string | undefined) => void) {\n        DIRECTIONS\n            .forEach((dir: Dir) => {\n                const x = p.addP(dirToPt(dir));\n                f(dir, x, this.getV(x.x, x.y));\n            });\n    }\n\n    getDirectionOptions(p: Pt): Dir[] {\n        const rp = this.getClosestRailPoint(p);\n        return DIRECTIONS.filter(d => {\n            const v = dirToPt(d);\n            const x = rp.addP(v);\n            if (this.isPathP(x)) return true;\n            return false;\n        });\n    }\n\n    getSafeMove(p: Pt, moveVec: Pt): { safe: false } | { safe: true, newPos: Pt } {\n        const to = p.addP(moveVec);\n        if (this.onRail(to)) return { safe: true, newPos: to };\n\n        const cp = p.copy();\n\n        switch (ptToDir(moveVec)) {\n            case 'left':\n                cp.y = Math.round(cp.y);\n                cp.x += moveVec.x;\n                break;\n            case 'right':\n                cp.y = Math.round(cp.y);\n                cp.x += moveVec.x;\n                break;\n            case 'up':\n                cp.x = Math.round(cp.x);\n                cp.y += moveVec.y;\n                break;\n            case 'down':\n                cp.x = Math.round(cp.x);\n                cp.y += moveVec.y;\n                break;\n        }\n\n        if (this.onRail(cp)) return { safe: true, newPos: cp };\n\n        return { safe: false };\n    }\n\n}\n\nexport class Agent {\n    minMoveDist = 0.1;\n    maxMoveDist = 0.1;\n    constructor(public pos: Pt, public dir: Dir, public level: Level) {\n    }\n\n    getClosestRailPoint() {\n        return this.level.getClosestRailPoint(this.pos);\n    }\n\n    nearARailPoint(): boolean {\n        return this.level.nearARailPoint(this.pos);\n    }\n\n    get dirV() {\n        return dirToPt(this.dir);\n    }\n\n    getMoveVec(dt: number) {\n        const dirV = this.dirV.scale(dt * 0.005);\n        if (this.dir === 'right' || this.dir === 'left') {\n            return new Pt(\n                signedClamp(dirV.x, this.minMoveDist, this.maxMoveDist),\n                dirV.y,\n            );\n        }\n        return new Pt(\n            dirV.x,\n            signedClamp(dirV.y, this.minMoveDist, this.maxMoveDist),\n        );\n    }\n\n    railGuide() {\n        switch (this.dir) {\n            case 'left':\n            case 'right':\n                this.pos.y = Math.round(this.pos.y);\n                break;\n            case 'down':\n            case 'up':\n                this.pos.x = Math.round(this.pos.x);\n        }\n    }\n}\n\nexport class Pacman extends Agent {\n    mouthOpenPerc: number = 0;\n    internalTick: number = 0;\n\n    constructor(pos: Pt, dir: Dir, level: Level) {\n        super(pos, dir, level);\n    }\n\n    static create(lvl: Level) {\n        return new Pacman(\n            lvl.getLocationsOfChar('p').pop(),\n            'right',\n            lvl,\n        );\n    }\n\n    tick(dt: number, playerInput?: Dir) {\n        this.internalTick += dt;\n        this.mouthOpenPerc = Math.abs(Math.sin(this.internalTick * 0.01)) * 0.1;\n        this.railGuide();\n        \n        if (playerInput) {\n            this.dir = playerInput;\n            const vel = this.getMoveVec(dt);\n            const outcome = this.level.getSafeMove(this.pos, vel)\n            if (outcome.safe) {\n                this.pos = outcome.newPos;\n            }\n        }\n\n    }\n}\n\nexport class Ghost extends Agent {\n    lastGate?: Pt; // the last rail point the ghost made a decision to move from\n    constructor(pos: Pt, dir: Dir, level: Level, public color: string, public scared: boolean) {\n        super(pos, dir, level);\n    }\n\n    static create(lvl: Level, color: string) {\n        return new Ghost(\n            new Pt(22, 19),\n            'right',\n            lvl,\n            color,\n            false,\n        );\n    }\n\n    lastMovedFromHere() {\n        if (!this.lastGate) return false;\n        const closestRailPoint = this.getClosestRailPoint();\n        return closestRailPoint.eq(this.lastGate);\n    }\n\n    canSeePacman(pmp: Pt): Dir | undefined {\n        const pos = this.pos;\n        const canCheckY = !inRange(pos.y % 1, 0.1, 0.9);\n        const canCheckX = !inRange(pos.x % 1, 0.1, 0.9);\n        const py = Math.round(pos.y);\n        const px = Math.round(pos.x);\n        if (canCheckY && py === Math.round(py) && py === pmp.y) {\n            const [mn, mx] = minMax(pmp.x, pos.x);\n            for (let i = Math.ceil(mn); i <= Math.floor(mx); i++) {\n                if (!this.level.isPath(i, py)) return;\n            }\n            return pmp.x === mn ? 'left' : 'right';\n        } else if (canCheckX && px === Math.round(px) && px === pmp.x) {\n            const [mn, mx] = minMax(pmp.y, pos.y);\n            for (let i = Math.ceil(mn); i <= Math.floor(mx); i++) {\n                if (!this.level.isPath(px, i)) return;\n            }\n            return pmp.y === mn ? 'up' : 'down';\n        }\n        return;\n    }\n\n    tick(dt: number, pacmanPos: Pt) {\n        this.railGuide();\n        const seePacman = this.canSeePacman(pacmanPos);\n        let speed = 1;\n        if (seePacman) {\n            this.dir = seePacman;\n            this.railGuide();\n            speed = 1.2;\n        } else {\n            const nearRailPoint = this.nearARailPoint();\n            if (nearRailPoint) this.pos = this.getClosestRailPoint();\n\n            if (nearRailPoint && !this.lastMovedFromHere() && !this.level.onALinearPath(this.pos)) {\n                const randomDir = pickRandom(this.level.getDirectionOptions(this.pos));\n                if (randomDir) {\n                    this.dir = randomDir;\n                    this.railGuide();\n                    this.lastGate = this.pos.round();\n                }\n            }\n        }\n\n        const vel = this.dirV.scale(dt * 0.005 * speed);\n        const outcome = this.level.getSafeMove(this.pos, vel)\n        if (outcome.safe) {\n            this.pos = outcome.newPos;\n        } else {\n            this.pos = this.pos.round();\n        }\n    }\n}\n\nexport type GameState =\n    | 'not-started'\n    | 'playing'\n    | 'game-over'\n    | 'you-won'\n    | 'paused';\n\nexport type Difficulty =\n    | 'easy'\n    | 'medium'\n    | 'hard';\n\nconst GHOST_COLORS = [\n    'red',\n    'blue',\n    'yellow',\n    'purple',\n    'orange',\n    'firebrick',\n];\n\nconst difficultyToGhostCount: Record<Difficulty, number> = {\n    easy: 4,\n    medium: 5,\n    hard: 6,\n};\n\nexport class Game {\n    pacman: Pacman;\n    ghosts: Ghost[];\n    candy: Pt[] = [];\n    gameState: GameState = 'not-started';\n    constructor(public level: Level) {\n        this.pacman = Pacman.create(level);\n        this.ghosts = [];\n    }\n\n    startNewGame(difficulty: Difficulty) {\n        // reset pacman\n        this.pacman = Pacman.create(this.level);\n        // reset ghosts\n        const ghostCount = difficultyToGhostCount[difficulty];\n        this.ghosts = GHOST_COLORS\n            .slice(0, ghostCount)\n            .map(color => Ghost.create(this.level, color));\n        // reset candy\n        this.level.forEach((v, x, y) => {\n            if (v && v !== ' ') {\n                this.candy.push(new Pt(x, y));\n            }\n        });\n        this.gameState = 'playing';\n    }\n\n    tick(dt: number, playerInput?: Dir, onGameStateChange?: (s: GameState) => void) {\n        if (this.gameState !== 'playing') return;\n        this.pacman.tick(dt, playerInput);\n        this.ghosts.forEach(g => g.tick(dt, this.pacman.pos));\n        this.candy = this.candy.filter(c => {\n            return c.dist(this.pacman.pos) > 1;\n        })\n\n        if (this.pacmanIsNearGhosts()) {\n            this.gameState = 'game-over';\n            onGameStateChange?.(this.gameState);\n        }\n\n        if (this.getCandyRemaining() <= 0) {\n            this.gameState = 'you-won';\n            onGameStateChange?.(this.gameState);\n        }\n    }\n\n    pacmanIsNearGhosts() {\n        const pacmanPos = this.pacman.pos;\n        return this.ghosts.some(g => g.pos.dist(pacmanPos) < 1);\n    }\n\n    getCandyRemaining() {\n        return this.candy.length;\n    }\n}\n\nfunction signedClamp(x: number, min: number, max: number): number {\n    const neg = x < 0;\n    let v = x;\n    if (neg) v = -x;\n    const out = Math.max(Math.min(v, max), min);\n    return neg ? -out : out;\n}\n\nfunction pickRandom<T>(arr: T[]): T | undefined {\n    if (arr.length === 0) return;\n    return arr[Math.floor(Math.random() * arr.length)];\n}\n\nfunction inRange(x: number, mn: number, mx: number) {\n    return mn <= x && x <= mx;\n}\n\nfunction minMax(a: number, b: number): [number, number] {\n    return [\n        Math.min(a, b),\n        Math.max(a, b),\n    ];\n}\n","import { Pt } from './pt';\nimport {\n    Ghost,\n    Pacman,\n} from './game';\n\nexport const drawPacMan = (ctx: CanvasRenderingContext2D, pacman: Pacman, N: number) => {\n    const size = N * 8/10;\n    const pos = pacman.pos.add(1.5, 1.4).scale(N);\n    const { mouthOpenPerc } = pacman;\n    const angle = pacman.dirV.getAngle();\n    ctx.translate(pos.x, pos.y);\n    ctx.rotate(angle / (180 / Math.PI));\n    const bx = mouthOpenPerc * Math.PI * 2;\n    ctx.fillStyle = 'yellow';\n    ctx.beginPath();\n    ctx.arc(0, 0, size, bx, bx + Math.PI);\n    ctx.closePath();\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(0, 0, size, Math.PI * 2 - bx - Math.PI, Math.PI * 2 - bx);\n    ctx.closePath();\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(0, 0, size, 0.25 * Math.PI * 2, 0.75 * Math.PI * 2);\n    ctx.closePath();\n    ctx.fill();\n    ctx.resetTransform();\n}\n\nexport const drawGhost = (ctx: CanvasRenderingContext2D, ghost: Ghost, N: number) => {\n    const size = N * 16/10;\n    const pos = ghost.pos.add(0.8, 0.6).scale(N);\n    ctx.translate(pos.x, pos.y);\n    ctx.fillStyle = ghost.scared ? 'black' : ghost.color;\n    drawArc(ctx, 0, 0, size * 0.5, 180, 360);\n    \n    ctx.beginPath();\n    ctx.rect(-size * 0.5, -1, size, size * 0.5+1);\n    ctx.closePath();\n    ctx.fill();\n    \n    for (let i = 0; i < 3; i++) {\n        drawArc(ctx, -size * 0.5 + size / 6 + (size / 3) * i, size * 0.4, size / 6, 0, 180);\n    }\n\n    \n    // eyes\n    const eyeSize = size * 0.15;\n    ctx.fillStyle = 'white';\n    drawEye(ctx, -0.2 * size, -0.15 * size, eyeSize, ghost.dirV);\n    ctx.fillStyle = 'white';\n    drawEye(ctx, 0.2 * size, -0.15 * size, eyeSize, ghost.dirV);\n    \n    ctx.resetTransform();\n};\n\nexport const drawEye = (ctx: CanvasRenderingContext2D, x: number, y: number, size: number, dir: Pt) => {\n    ctx.fillStyle = 'white';\n    drawEllipse(ctx, x, y, size, size);\n    ctx.fillStyle = 'black';\n    const pupilSize = size * 0.5;\n    drawEllipse(ctx, x + dir.x * pupilSize, y + dir.y * pupilSize, pupilSize, pupilSize);\n};\n\nexport const drawEllipse = (ctx: CanvasRenderingContext2D, x: number, y: number, xRad: number, yRad: number) => {\n    ctx.beginPath();\n    ctx.ellipse(x, y, xRad, yRad, 0, 0, 360);\n    ctx.closePath();\n    ctx.fill();\n};\n\nexport const drawArc = (ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, startAngle: number, endAngle: number) => {\n    const scalar = Math.PI * 2 * (1 / 360);\n    \n    ctx.beginPath();\n    ctx.arc(x, y, radius, scalar * startAngle , scalar * endAngle);\n    ctx.closePath();\n    ctx.fill();\n};\n","import * as LReact from '../l_react';\nimport { Dir, DIRECTIONS } from './game';\n\nexport class Controller {\n    buttons: Map<Dir, boolean> = new Map();\n    \n    isPressed(d: Dir): boolean {\n        return !!this.buttons.get(d);\n    }\n\n    reset() {\n        this.buttons.clear();\n    }\n\n    setFromKeyboard(key: string, on: boolean) {\n        const d = Controller.keyboardKeyToDir(key);\n        if (d) {\n            this.setV(d, on);\n        }\n    }\n\n    setV(d: Dir, on: boolean) {\n        this.buttons.set(d, on);\n    }\n\n    static keyboardKeyToDir(key: string): Dir | undefined {\n        switch (key) {\n            case 'ArrowUp': return 'up';\n            case 'ArrowRight': return 'right';\n            case 'ArrowLeft': return 'left';\n            case 'ArrowDown': return 'down';\n        }\n        return undefined;\n    }\n}\n\nexport const setupKeyboardControls = (controller: Controller) => {\n    const keyDownListener = (e: KeyboardEvent) => {\n        controller.setFromKeyboard(e.key, true);\n    };\n    document.body.addEventListener('keydown', keyDownListener);\n    const keyUpListener = (e: KeyboardEvent) => {\n        controller.setFromKeyboard(e.key, false);\n    };\n    document.body.addEventListener('keyup', keyUpListener);\n    return () => {\n        document.body.removeEventListener('keydown', keyDownListener);\n        document.body.removeEventListener('keyup', keyUpListener);\n    };\n};\n\nexport const KeyboardInstructions = () => {\n    return LReact.Element('div', {\n        style: {\n            fontSize: '24px',\n            display: 'grid',\n            justifyContent: 'center',\n            gridTemplateColumns: 'minmax(auto, 400px)',\n            textAlign: 'center',\n        },\n    }, [\n        `\n            You can use the up, down, left and right arrow keys to move pacman.\n        `,\n    ]);\n};\n\ntype ButtonControlsProps = {\n    controller: Controller,\n};\n\nconst BUTTON_SIZE = 70;\n\nconst BlankDiv = () => LReact.Element('div');\n\nexport class ButtonControls extends LReact.Component<ButtonControlsProps, {}> {\n    dirToEmoji = new Map<Dir, string>([\n        ['up', '⬆️'],\n        ['left', '⬅️'],\n        ['right', '➡️'],\n        ['down', '⬇️'],\n    ]);\n\n    render() {\n        const controller = this.props.controller;\n        const directionsList = Array.from(this.dirToEmoji.keys());\n        const buttons = directionsList.map((d: Dir): LReact.LReactElement => {\n            return LReact.Element('button', {\n                onTouchStart: (e) => {\n                    controller.setV(d, true);\n                    e.preventDefault();\n                    e.stopPropagation();\n                    console.log(controller.isPressed(d))\n                },\n                onTouchEnd: (e) => {\n                    controller.setV(d, false);\n                    e.preventDefault();\n                    e.stopPropagation();\n                },\n                style: {\n                    width: `${BUTTON_SIZE}px`,\n                    height: `${BUTTON_SIZE}px`,\n                    fontSize: '50px',\n                    userSelect: 'none',\n                    borderRadius: '0px',\n                    border: '0px solid black',\n                    padding: '0',\n                    margin: '0',\n                    overflow: 'hidden',\n                },\n            }, [this.dirToEmoji.get(d) ?? d]);\n        });\n\n        return LReact.Element('div', {\n            style: {\n                width: `100%`,\n                height: `${BUTTON_SIZE * 3}px`,\n                display: 'grid',\n                justifyContent: 'center',\n                gridAutoFlow: 'row',\n                gridTemplateRows: `repeat(3, ${BUTTON_SIZE}px)`,\n                gridTemplateColumns: `repeat(3, ${BUTTON_SIZE}px)`,\n            },\n        }, [\n            LReact.Element(BlankDiv),\n            buttons[0],\n            LReact.Element(BlankDiv),\n\n            buttons[1],\n            LReact.Element(BlankDiv),\n            buttons[2],\n\n            LReact.Element(BlankDiv),\n            buttons[3],\n            LReact.Element(BlankDiv),\n        ]);\n    }\n}\n","import * as LReact from '../l_react';\nimport { Level, Game, Dir, DIRECTIONS, GameState, Difficulty } from './game';\nimport { Pt } from './pt';\nimport { drawPacMan, drawGhost, drawEllipse } from './render';\nconst { Element } = LReact;\nimport {\n    Controller,\n    setupKeyboardControls,\n    ButtonControls,\n    KeyboardInstructions,\n} from './game_controls';\n\ntype GameComponentState = {\n    state: GameState,\n    windowSize: { w: number, h: number },\n};\nexport class GameComponent extends LReact.Component<{}, GameComponentState> {\n    level: Level;\n    game: Game;\n    controller = new Controller();\n    windowResizeListener?: (e: UIEvent) => void;\n    \n\n    constructor(props: {}) {\n        super(props);\n        this.level = Level.createLevel1();\n        this.game = new Game(this.level);\n        this.state = {\n            state: this.game.gameState,\n            windowSize: {\n                w: window.innerWidth,\n                h: window.innerHeight,\n            },\n        };\n    }\n\n    componentDidMount() {\n        this.windowResizeListener = () => {\n            const w = window.innerWidth;\n            const h = window.innerHeight;\n            if (w !== this.state.windowSize.w || h !== this.state.windowSize.h) {\n                this.setState({\n                    windowSize: { w, h },\n                });\n            }\n        };\n        window.addEventListener('resize', this.windowResizeListener);\n    }\n\n    componentDidUnmount(){\n        if (this.windowResizeListener) {\n            window.removeEventListener('resize', this.windowResizeListener);\n            this.windowResizeListener = undefined;\n        }\n    }\n\n    startGame = (difficulty: Difficulty) => {\n        this.game.startNewGame(difficulty);\n        this.setState({ state: this.game.gameState });\n    };\n\n    render() {\n        const useMobileControls = this.useMobileControls;\n        const { gameRenderScale, size } = this.gameRenderScaleAndSize;\n\n        return Element('div', {}, [\n            Element('div', {\n                style: {\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    width: `${size.w}px`,\n                    margin: 'auto auto',\n                },\n            }, [\n                Element(LiveGameScore, { g: this.game }),\n                Element('button', {\n                    style: {\n                        display: this.state.state === 'playing' ? 'block' : 'none',\n                    },\n                    onClick: () => {\n                        if (this.game.gameState !== 'playing') return;\n                        this.game.gameState = 'paused';\n                        this.setState({ state: 'paused' });\n                    },\n                }, ['pause']),\n            ]),\n            Element(LevelGameContainer, size, [\n                Element(RenderedLevel, { level: this.level, N: gameRenderScale }),\n                this.renderGameState(),\n            ]),\n            useMobileControls ? Element(ButtonControls, { controller: this.controller }) : Element(KeyboardInstructions),\n        ]);\n    }\n\n    get useMobileControls() {\n        return this.state.windowSize.w < 400;\n    }\n\n    get gameRenderScaleAndSize() {\n        const { windowSize } = this.state;\n\n        const s = Math.min(windowSize.w - 16, 600);\n\n        const size = {\n            w: s,\n            h: s + 10,\n        };\n\n        return {\n            gameRenderScale: size.w / (this.level.w+2),\n            size,\n        }; \n    }\n\n    renderGameState() {\n        const { gameRenderScale } = this.gameRenderScaleAndSize;\n        switch (this.game.gameState) {\n            case 'playing':\n                return Element(AnimatedGame, { game: this.game, gameRenderScale, controller: this.controller, onGameStateChange: s => this.setState({ state: s }) }, []);\n            case 'not-started':\n                return Element(MenuOverlay, {}, [\n                    Element(StartGameMenu, {\n                        startGame: this.startGame,\n                    }),\n                ]);\n            case 'game-over':\n                return Element(MenuOverlay, {}, [Element(GameOverMenu, {\n                    restart: this.restartGame,\n                    message: 'Oh, sorry you lost 😭',\n                    buttonText: 'Play Again',\n                })]);\n            case 'you-won':\n                return Element(MenuOverlay, {}, [Element(GameOverMenu, {\n                    restart: this.restartGame,\n                    message: 'You Won!! 🎉',\n                    buttonText: 'Play Again',\n                })]);\n            case 'paused':\n                return Element(MenuOverlay, {}, [Element(GameOverMenu, {\n                    restart: this.unpause,\n                    message: 'paused',\n                    buttonText: 'back',\n                })]);\n        }\n    }\n\n    pause = () => {\n        this.setGameState('paused');\n    };\n\n    unpause = () => {\n        this.setGameState('playing');\n    };\n\n    restartGame = () => {\n        this.setGameState('not-started');\n    };\n\n    setGameState = (s: GameState) => {\n        this.game.gameState = s;\n        this.setState({ state: s });\n    };\n}\n\nclass LiveGameScore extends LReact.Component<{ g: Game }, { score: number }> {\n    intervalId?: number;\n    constructor(props: { g: Game }) {\n        super(props);\n        this.state = {\n            score: props.g.getCandyRemaining(),\n        };\n        \n    }\n    componentDidMount = () => {\n        this.intervalId = setInterval(this.maybeUpdateScore, 30);\n    };\n    componentDidUnmount = () => {\n        if (this.intervalId != null) clearInterval(this.intervalId);\n        this.intervalId = undefined;\n    };\n    maybeUpdateScore = () => {\n        const newScore = this.props.g.getCandyRemaining();\n        if (newScore !== this.state.score) {\n            this.setState({ score: newScore });\n        }\n    };\n    render() {\n        return Element('div', {}, ['score: ' + this.state.score]);\n    }\n}\n\ntype AnimatedGameProps = {\n    game: Game,\n    gameRenderScale: number,\n    controller: Controller,\n    onGameStateChange: (s: GameState) => void,\n};\nclass AnimatedGame extends LReact.Component<AnimatedGameProps, {}> {\n    ctx?: CanvasRenderingContext2D;\n    canvasPixels: Pt;\n    animationRequest?: number;\n    killEventListeners?: () => void;\n    constructor(props: AnimatedGameProps) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.gameLoop();\n        this.setupEventListeners();\n    };\n\n    get canvasPixel() {\n        return new Pt(this.props.game.level.w, this.props.game.level.h);\n    }\n\n    componentDidUnmount() {\n        this.killEventListeners?.();\n        this.props.controller.reset();\n        if (this.animationRequest !== undefined) {\n            cancelAnimationFrame(this.animationRequest);\n            this.animationRequest = undefined;\n        }\n    };\n\n    get canvasSize() {\n        const gameRenderScale = this.props.gameRenderScale;\n        const level = this.props.game.level;\n        const w = (level.w+1) * gameRenderScale;\n        const h = (level.h+1) * gameRenderScale;\n        return { w, h };\n    }\n\n    render() {\n        const { gameRenderScale } = this.props;\n        const canvasSize = this.canvasSize;\n        return Element('canvas', {\n            ref: this.canvasSet,\n            width: canvasSize.w,\n            height: canvasSize.h,\n            style: {\n                width: `${canvasSize.w}px`,\n                height: `${canvasSize.h}px`,\n                position: 'absolute',\n                zIndex: 2,\n                top: (gameRenderScale*0.5) + 'px',\n                left: (gameRenderScale*0.5) + 'px',\n            },\n        });\n    }\n\n    canvasSet = (canvas: HTMLCanvasElement) => {\n        const ctx = canvas.getContext('2d');\n        this.ctx = ctx;\n    }\n\n    setupEventListeners() {\n        this.killEventListeners?.();\n        const controller = this.props.controller;\n        controller.reset();\n        this.killEventListeners = setupKeyboardControls(this.props.controller);\n    }\n\n    getPlayerInputDir(): Dir | undefined {\n        for (const d of DIRECTIONS) {\n            if (this.props.controller.isPressed(d)) return d;\n        }\n    }\n\n    gameLoop() {\n        let prevDelta = 0;\n        const loop = (delta: number) => {\n            const N = this.props.gameRenderScale;\n            //console.log(N, this);\n            const { ctx } = this;\n            const { game } = this.props;\n            if (!ctx) return;\n            const dt = delta - prevDelta;\n            prevDelta = delta;\n            game.tick(dt, this.getPlayerInputDir(), this.props.onGameStateChange);\n            const canvasSize = this.canvasSize;\n            ctx.clearRect(0, 0, canvasSize.w, canvasSize.h);\n            ctx.translate(-N * 0.6, -N * 0.6);\n\n            game.candy.forEach((c) => {\n                const p = c.add(1.5, 1.5).scale(N);\n                ctx.fillStyle = 'pink';\n                drawEllipse(ctx, p.x, p.y, 2, 2);\n            });\n            \n            drawPacMan(ctx, game.pacman, N);\n            game.ghosts.forEach(g => drawGhost(ctx, g, N));\n\n            ctx.resetTransform();\n\n            if (this.animationRequest !== undefined)\n                this.animationRequest = requestAnimationFrame(loop);\n        }\n        this.animationRequest = requestAnimationFrame(loop);\n    }\n}\n\nconst MenuOverlay = ({\n    children,\n}: {\n    children?: LReact.LReactElement[],\n}) => {\n    return Element('div', {\n        style: {\n            width: '100%',\n            height: '100%',\n            backdropFilter: 'blur(5px)',\n        },\n    }, children);\n};\n\n\nconst StartGameMenu = ({\n    startGame,\n}: {\n    startGame: (difficulty: Difficulty) => void,\n}) => {\n\n    const [difficulty, setDifficulty] = LReact.useState<Difficulty>('easy');\n\n    const CheckBox = ({\n        d,\n    }: {\n        d: Difficulty,\n    }) => {\n        return Element('div', {\n            style: {\n                display: 'grid',\n                gridAutoFlow: 'column',\n                gridGap: '16px',\n                alignItems: 'center',\n                gridTemplateColumns: '200px 1fr',\n            },\n        }, [\n            Element('label', {\n                style: {\n                    fontSize: '20px',\n                },\n            }, [d]),\n            Element('input', {\n                type: 'checkbox',\n                checked: difficulty === d,\n                onChange: e => {\n                    if (d === difficulty) {\n                        e.target.checked = true;\n                    } else {\n                        setDifficulty(d);\n                    }\n                },\n            }),\n        ]);\n    };\n\n    return Element('div', {\n        style: {\n            color: 'orange',\n            fontSize: '40px',\n            width: '100%',\n            height: '100%',\n            display: 'grid',\n            gridAutoFlow: 'row',\n            justifyItems: 'center',\n            alignItems: 'center',\n            gridGap: '24px',\n            alignContent: 'center',\n            gridTemplateRows: 'repeat(4, min-content)',\n            background: 'rgba(0,0,0,0.5)',\n        },\n    }, [\n        `start game`,\n        Element('div', { style: { display: 'grid', gridAutoFlow: 'row', gridGap: '8px' } }, [\n            Element(CheckBox, { d: 'easy'  }),\n            Element(CheckBox, { d: 'medium'  }),\n            Element(CheckBox, { d: 'hard'  }),\n        ]),\n        Element(BigButton, {\n            onClick: () => startGame(difficulty),\n            label: 'Play',\n        }),\n    ]);\n};\n\nconst GameOverMenu = ({\n    restart,\n    message,\n    buttonText,\n}: {\n    restart(): void,\n    message: string,\n    buttonText: string,\n}) => {\n    return Element('div', {\n        style: {\n            background: 'rgba(0,0,0,0.5)',\n            width: '100%',\n            height: '100%',\n            display: 'grid',\n            gridTemplateRows: 'min-content min-content',\n            alignContent: 'center',\n            justifyContent: 'center',\n            gridGap: '16px',\n        },\n    }, [\n        Element('div', {\n            style: {\n                textAlign: 'center',\n                color: 'orange',\n                fontSize: '30px',\n            },\n        }, [message]),\n        Element(BigButton, {\n            onClick: restart,\n            label: buttonText,\n        }),\n    ]);\n};\n\nconst BigButton = ({\n    label,\n    onClick,\n}: {\n    label: string\n    onClick: () => void,\n}) => {\n    return Element('button', {\n        style: {\n            fontSize: '40px',\n            width: '100%',\n            maxWidth: '250px',\n            cursor: 'pointer',\n        },\n        onClick,\n    }, [label]);\n};\n\nconst LevelGameContainer = ({ w, h, children }: {\n    w: number,\n    h: number,\n    children?: LReact.LReactElement[],\n}) => {\n    return Element('div', {\n        style: {\n            backgroundColor: 'lightblue',\n            display: 'grid',\n            placeItems: 'center',\n            overflow: 'hidden',\n            boxSizing: 'border-box',\n        },\n    }, [\n        Element('div', {\n            style: {\n                width: `${w}px`,\n                height: `${h}px`,\n                position: 'relative',\n            },\n        }, children),\n    ]);\n};\n\nfunction RenderedLevel({\n    level,\n    N,\n}: {\n    level: Level,\n    N: number,\n}) {\n    const thick = 2;\n    const halfThick = thick * 0.5;\n    const offset = new Pt(N, N);\n    let blocks = [];\n    for (let y = 0; y < level.h; y++) {\n        for (let x = 0; x < level.w; x++) {\n            if (level.isPath(x, y)) {\n                const center = new Pt(x + 0.5, y + 0.5);\n                const topLeft = center.add(-halfThick, -halfThick);\n                blocks.push(Element(Block, {\n                    top:  topLeft.y * N + offset.y,\n                    left: topLeft.x * N + offset.x,\n                    width:  N * thick,\n                    height: N * thick,\n                    color: 'black',\n                }));\n            }\n        }\n    }\n    return Element('div', {}, [\n        ...blocks,\n    ]);\n}\n\nconst Block = ({\n    top,\n    left,\n    width,\n    height,\n    color = 'blue',\n}: {\n    color?: string,\n    top: number,\n    left: number,\n    width: number,\n    height?: number,\n}) => {\n    return Element('div', {\n        style: {\n            width: `${width}px`,\n            height: `${height ?? width}px`,\n            position: 'absolute',\n            top: `${top}px`,\n            left: `${left}px`,\n            backgroundColor: color,\n        },\n    });\n};\n","import * as LReact from './l_react';\nimport { GameComponent } from './pacman/index';\nconst Element = LReact.Element;\n\nclass Thao extends LReact.Component {\n    render() {\n        return Element('div', {}, [\n            'Thao',\n        ]);\n    }\n}\n\nfunction Luke({}: {}) {\n\n    const [lukeColor, setLukeColor] = LReact.useState('red');\n    const [lincolnColor, setLincolnColor] = LReact.useState('orange');\n\n    return Element('div', {}, [\n        Element('div', { style: { color: lukeColor } }, ['Luke']),\n        Element('div', { style: { color: lincolnColor } }, ['Lincoln']),\n        Element('button', {\n            onClick: () => {\n                const newColor = lukeColor === 'red' ? 'blue' : 'red';\n                setLukeColor(newColor);\n            },\n        }, ['change luke']),\n        Element('button', {\n            onClick: () => {\n                const newColor = lincolnColor === 'orange' ? 'purple' : 'orange';\n                setLincolnColor(newColor);\n            },\n        }, ['change lincoln']),\n    ]);\n}\n\n\nfunction App({}: {}) {\n    return Element('div', {}, [\n        Element(GameComponent),\n        Element(Luke),\n        Element(Thao),\n    ]);\n};\n\nLReact.RenderDom(Element(App), document.body);\n"]}